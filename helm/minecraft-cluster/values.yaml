# Global settings
global:
  namespace: minecraft
  clusterName: my-minecraft-cluster

# Enable/disable components
elasticsearch:
  enabled: true
logstash:
  enabled: true
kibana:
  enabled: true
filebeat:
  enabled: true
haproxy:
  enabled: true
minecraft:
  enabled: true
prometheus:
  enabled: true
grafana:
  enabled: true
alertmanager:
  enabled: false

# Minecraft server settings
minecraft:
  server:
    replicaCount: 2
    image:
      repository: itzg/minecraft-server
      tag: latest
    eula: "TRUE"
    type: "VANILLA" # Or PAPER, SPIGOT, etc.
    version: "1.19.4" # Specify desired version
    motd: "A Minecraft Server Powered by Kubernetes"
    maxPlayers: 50
    onlineMode: "true"
    rcon:
      enabled: true
      port: 25575
      password: "your_rcon_password" # Change this! Use Kubernetes Secrets in production
    jvm:
      heapSize: "4G"
    # Modpack support (example)
    modpackUrl: "" # URL to a modpack ZIP file (if using init containers)
    # mods: # If providing a list of mods through environment variables
    #   - "mod1.jar"
    #   - "mod2.jar"
    # ...

# ... (other settings for Elasticsearch, Logstash, Kibana, etc. - refer to their respective Helm chart documentation)

# Persistence (example - adapt to your storage class and requirements)
persistence:
  enabled: true
  storageClass: "standard" # Or your preferred storage class
  accessMode: ReadWriteOnce
  size: 10Gi

# Resource limits and requests (tune as needed)
resources:
  limits:
    cpu: 2000m
    memory: 8Gi
  requests:
    cpu: 1000m
    memory: 4Gi

# Autoscaling (example)
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80 # Example: scale based on CPU as well
  targetPlayerCount: 5 # Example custom metric - requires player count exporter

# Security
security:
  tls:
    enabled: true # Enable TLS for components
    # certManager: true # Option to use cert-manager for certificate management (see later section)

# Monitoring
monitoring:
  dashboards:
    # Example of enabling pre-built dashboards
    enabled: true

# Cost optimization
costOptimization:
  enabled: false # Enable cost optimization features
  # nodeSelector:  # Example: If you have specific node pools for cost optimization
  #   node.kubernetes.io/instance-type: preemptible
  # tolerations: # Example: To tolerate preemptible node taints
  # - key: "preemptible"
  #   operator: "Exists"
  #   effect: "NoSchedule"
